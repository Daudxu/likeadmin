<template>
    <div class="edit">
        <popup
            ref="popupRef"
            :clickModalClose="false"
            :title="popupTitle"
            width="700px"
            :async="true"
            @confirm="handleConfirm"
            @close="handleClose"
        >
            <el-form
                class="m-r-40"
                ref="formRef"
                :model="formData"
                label-width="80px"
                size="small"
                :rules="rules"
                v-loading="showLoading"
            >
{FORM_VIEW}
            </el-form>
        </popup>
    </div>
</template>

<script lang="ts" setup>

import { computed, reactive, ref, shallowRef, watch } from 'vue'
import Popup from '@/components/popup/index.vue'
import { apiDictDataLists } from '@/api/dict'
import { api{UPPER_CAMEL_NAME}Add, api{UPPER_CAMEL_NAME}Detail, api{UPPER_CAMEL_NAME}Edit } from '@/api/{API_DIR}'
import { ElForm } from 'element-plus'

const props = defineProps<{
    modelValue: boolean
    selectId?: number
}>()

const emit = defineEmits<{
    (event: 'success'): void
    (event: 'update:modelValue', value: boolean): void
}>()

const popupRef = shallowRef<InstanceType<typeof Popup>>()
const formRef = shallowRef<InstanceType<typeof ElForm>>()

// 字典数据
const dictData = reactive<Record<string, any[]>>({
{DICT_DATA}
})

// 获取字典数据
const getDictData = () => {
{DICT_DATA_API}
}


// 表单数据
const formData = reactive({
{FORM_DATA}
})

// 表单验证
const rules = reactive<any>({
{FORM_VALIDATE}
})

// 弹窗标题
const popupTitle = computed(() => {
    return props.selectId != undefined ? '编辑{TABLE_COMMENT}' : '添加{TABLE_COMMENT}'
})

// 是否显示loading
const showLoading = ref(false)

// 获取详情
const getDetail = async () => {
    try {
        showLoading.value = true
        const data = await api{UPPER_CAMEL_NAME}Detail({ {PK}: props.selectId })
        showLoading.value = false
        Object.keys(formData).forEach(key => {
            //@ts-ignore
            formData[key] = data[key]
        })
    } catch (error) {
        showLoading.value = false
    }
}

// 提交按钮
const handleConfirm = async () => {
    await formRef.value?.validate()
    props.selectId ? await api{UPPER_CAMEL_NAME}Edit({ {PK}: props.selectId, ...formData }) : await api{UPPER_CAMEL_NAME}Add(formData)
    popupRef.value?.close()
    emit('success')
}

// 关闭回调
const handleClose = () => {
    formRef.value?.resetFields()
    emit('update:modelValue', false)
}


watch(() => props.modelValue, (value) => {
    if (value) {
        popupRef.value?.open()
        props.selectId && getDetail()
    } else {
        popupRef.value?.close()
    }
})
getDictData()
</script>

<style lang="scss" scoped>
</style>